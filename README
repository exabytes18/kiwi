# Development:
cmake . -DCMAKE_BUILD_TYPE=Debug
make -j VERBOSE=1

# Building release:
cmake . -DCMAKE_BUILD_TYPE=Release
make -j



Pipelining is paramount to high performance.

Use structs for specifying DTOs.



Connection meshing strategy:
    - Nodes with lower ids initiate connections to nodes with higher ids
    - The following logic should hold for any node whose id = X:
        - Inbound connections have server_id < X (i.e. we only accept connections if they come from server_id < X)
        - Outbound connections have server_id > x (i.e. we only actively try to connect to server_id > X)



Per-node thread architecture:

    void Server::ClusterNode::ThreadMain(void) {    
        ConnectionState conn_state;
        while(true) {
            vector<Event> events = event_loop->GetReadyEvents();
            for (Event event : events) {
                ConnectionState* conn_state = static_cast<ConnectionState*>(event.data);
                int fd = conn_state.fd;

                if (event.events & WRITABLE) {
                    while (conn_state.hasDataToWrite()) {
                        // try to write data.
                    }
                }

                if (event.events & READABLE) {
                    while (true) {
                        char data[4096];
                        int len = readFromNetwork(data);
                        if (len == -1) {
                            if (errno == EAGAIN || errno == EWOULDBLOCK) {
                                conn_state.flushAndEnqueueResponsesIfAnyExist();
                                break;
                            } else {
                                LOG.error("Problem wr");
                                cerr << "Problem reading from socket: " << strerror(errno) << endl;
                                break;
                            }
                        }

                        /*
                        * Internally write to rocksdb as soon as we have a complete request, but
                        * don't fsync and don't enqueue any responses for sending.
                        * 
                        * Also, we only need to write to raft log and trigger asynchronous message
                        * delivery; we do not want to update main tables or notify clients directly
                        * from this thread.
                        */
                        conn_state->process(data, len);
                    }
                }

                if (conn_state->isClosed()) {
                    loop.remove(fd);
                    // Try to establish a new connection
                }
            }
        }
    }

    Benefits:
        - Reading/writing to socket happens on same thread (no contention on reads/writes)
        - Benefit of cache locality between readFromNetwork() and writeToRocksDB()
        - No need to signal network thread to write response after writeToRocksDB() (we can immediately do the write ourself).
        - No need to synchronize between network thread and thread writing to rocksdb() (we can get away with fewer locks).

    To test performance:
        - Disable synchronous writes to rocksdb (or don't even write to rocksdb at all) and see if it speeds up replication.

    Implementation notes:
        - Use poll() instead of epoll() or kqueue() since it's likely faster for this case (small set of file descriptors, which is largely stable over time).
